//todo.controller.test

const TodoController = require('../../controllers/todo.controller');
const TodoModel = require("../../model/todo.model");
const httpMocks = require('node-mocks-http')
const newTodo = require('../mock-data/new-todo.json')
const allTodos = require('../mock-data/all-todos.json');

TodoModel.create = jest.fn();
TodoModel.find = jest.fn();

let req, res, next;
beforeEach(()=>{
    req = httpMocks.createRequest();
    res = httpMocks.createResponse();
    next = jest.fn();
});

describe("TodoController.getTodoById", ()=>{
    it("should have a getTodoById", () => {
        expect(typeof TodoController.getTodoById).toBe("function");
    })
})
describe("TodoController.getTodos",()=>{
    it("should have a getTodos function", ()=>{
        expect(typeof TodoController.getTodos).toBe("function");
    });
    it("should call TodoModel.find({})", async  () =>{
        await TodoController.getTodos(req, res, next);
        expect(TodoModel.find).toHaveBeenCalledWith({});
    });
    it("should return response with status 200 and all todos", async()=>{
        TodoModel.find.mockReturnValue(allTodos);
        await TodoController.getTodos(req, res, next);
        expect(res.statusCode).toBe(200);
        expect(res._isEndCalled()).toBeTruthy();
        expect(res._getJSONData()).toStrictEqual(allTodos);
    });
    it("should handle errors in getTodos", async()=>{
        const errorMessage = {message:"Error finding"};
        const rejectedPromise = Promise.reject(errorMessage);
        TodoModel.find.mockReturnValue(rejectedPromise);

        await TodoController.getTodos(req, res, next);
        expect(next).toHaveBeenCalledWith(errorMessage);
    })

});

//test suite
describe("TodoController.createTodo", ()=>{

    beforeEach(()=>{
        req.body = newTodo;
    })
    it('should have a createTodo', ()=>{
        expect(typeof TodoController.createTodo).toBe("function");
    });
    it("should call TodoModel.create", ()=>{
        TodoController.createTodo(req, res, next);
        expect(TodoModel.create).toBeCalledWith(newTodo);
    })
    it("should return 201 response code",async ()=>{
        await TodoController.createTodo(req, res, next);
        expect(res.statusCode).toBe(201);
        //ensure that the response has been sent
        expect(res._isEndCalled()).toBeTruthy();
    })
    it('should return json body response',async () => {
        TodoModel.create.mockReturnValue(newTodo);
        await TodoController.createTodo(req, res, next);
        //_getJSONData:from node mocks http module
        expect(res._getJSONData()).toStrictEqual(newTodo);
    });
    it("should handle errors", async () => {
        const errorMessage = {message:"Done property missing"};
        const rejectedPromise = Promise.reject(errorMessage);

        TodoModel.create.mockReturnValue(rejectedPromise);
        await TodoController.createTodo(req, res, next);
        expect(next).toBeCalledWith(errorMessage);

    })

});

//todo.controller.int.test
//supertest: test whole nodejs app
const request = require("supertest");
const app = require("../../app");
const newTodo = require("../mock-data/new-todo.json");
const { response } = require("express");
const { report } = require("../../app");

const endpointUrl = "/todos/";


describe(endpointUrl, () => {
  test("GET"+endpointUrl, async ()=>{
    const response = await request(app).get(endpointUrl);

    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBeTruthy();
    expect(response.body[0].title).toBeDefined();
    expect(response.body[0].done).toBeDefined();
  })

  it("POST" + endpointUrl, async () => {
    const response = await request(app)
        .post(endpointUrl)
        .send(newTodo);

    expect(response.statusCode).toBe(201);
    expect(response.body.title).toBe(newTodo.title);
    expect(response.body.done).toBe(newTodo.done);
  });

  it("should return error 500 on malformed data with POST"+endpointUrl, async ()=>{
    const response = await request(app)
                            .post(endpointUrl)
                            .send({title:"Missing done property"});
    expect(response.statusCode).toBe(500);
    expect(response.body).toStrictEqual({
      message:"Todo validation failed: done: Path `done` is required."
    });
  })
});



//todo.routes
const express = require('express')
const todoController = require('../controllers/todo.controller')
const router = express.Router();

router.post("/", todoController.createTodo);

router.get("/", todoController.getTodos);

module.exports = router;


//app.js
const express = require('express');
const app = express();
const todoRoutes = require('./routes/todo.routes');
const mongodb = require("./mongodb/mongodb.connection")

mongodb.connect();

app.use(express.json());

app.use("/todos", todoRoutes)

app.use((error, req, res, next)=>{
    res.status(500).json({message:error.message});
})


app.get('/', (req, res)=>{
    res.json("Hello from Express")
});

// app.listen(3000, ()=>{
//     console.log("Server is running now")
// })

module.exports = app;

///todo.controller
const TodoModel = require('../model/todo.model')
exports.createTodo = async  (req, res, next) => {
   try{
    const createdModel = await TodoModel.create(req.body);
    res.status(201).json(createdModel);
   }
   catch(err){
        next(err);
   }
     
};

exports.getTodos = async(req, res, next)=>{

    try{
        const allTodos = await TodoModel.find({});
        res.status(200).json(allTodos);
    }
    catch(err){
        next(err);
    }
   
};